// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"lqkhoi-go-http-api/internal/models"
)

func newTask(db *gorm.DB, opts ...gen.DOOption) task {
	_task := task{}

	_task.taskDo.UseDB(db, opts...)
	_task.taskDo.UseModel(&models.Task{})

	tableName := _task.taskDo.TableName()
	_task.ALL = field.NewAsterisk(tableName)
	_task.ID = field.NewInt(tableName, "id")
	_task.CreatedAt = field.NewTime(tableName, "created_at")
	_task.UpdatedAt = field.NewTime(tableName, "updated_at")
	_task.DeletedAt = field.NewField(tableName, "deleted_at")
	_task.Title = field.NewString(tableName, "title")
	_task.Description = field.NewString(tableName, "description")
	_task.AssigneeID = field.NewInt(tableName, "assignee_id")
	_task.ProjectID = field.NewInt(tableName, "project_id")
	_task.SprintID = field.NewInt(tableName, "sprint_id")
	_task.Status = field.NewString(tableName, "status")
	_task.Priority = field.NewString(tableName, "priority")
	_task.DueDate = field.NewTime(tableName, "due_date")
	_task.Assignee = taskBelongsToAssignee{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Assignee", "models.User"),
		CurrentProject: struct {
			field.RelationField
			Manager struct {
				field.RelationField
			}
			Tasks struct {
				field.RelationField
				Assignee struct {
					field.RelationField
				}
				Project struct {
					field.RelationField
				}
				Sprint struct {
					field.RelationField
					Project struct {
						field.RelationField
					}
					Tasks struct {
						field.RelationField
					}
				}
			}
			Sprints struct {
				field.RelationField
			}
			TeamMembers struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Assignee.CurrentProject", "models.Project"),
			Manager: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Assignee.CurrentProject.Manager", "models.User"),
			},
			Tasks: struct {
				field.RelationField
				Assignee struct {
					field.RelationField
				}
				Project struct {
					field.RelationField
				}
				Sprint struct {
					field.RelationField
					Project struct {
						field.RelationField
					}
					Tasks struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("Assignee.CurrentProject.Tasks", "models.Task"),
				Assignee: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Assignee.CurrentProject.Tasks.Assignee", "models.User"),
				},
				Project: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Assignee.CurrentProject.Tasks.Project", "models.Project"),
				},
				Sprint: struct {
					field.RelationField
					Project struct {
						field.RelationField
					}
					Tasks struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Assignee.CurrentProject.Tasks.Sprint", "models.Sprint"),
					Project: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Assignee.CurrentProject.Tasks.Sprint.Project", "models.Project"),
					},
					Tasks: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Assignee.CurrentProject.Tasks.Sprint.Tasks", "models.Task"),
					},
				},
			},
			Sprints: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Assignee.CurrentProject.Sprints", "models.Sprint"),
			},
			TeamMembers: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Assignee.CurrentProject.TeamMembers", "models.User"),
			},
		},
		ManagedProjects: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Assignee.ManagedProjects", "models.Project"),
		},
		AssignedTasks: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Assignee.AssignedTasks", "models.Task"),
		},
	}

	_task.Project = taskBelongsToProject{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Project", "models.Project"),
	}

	_task.Sprint = taskBelongsToSprint{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Sprint", "models.Sprint"),
	}

	_task.fillFieldMap()

	return _task
}

type task struct {
	taskDo taskDo

	ALL         field.Asterisk
	ID          field.Int
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Title       field.String
	Description field.String
	AssigneeID  field.Int
	ProjectID   field.Int
	SprintID    field.Int
	Status      field.String
	Priority    field.String
	DueDate     field.Time
	Assignee    taskBelongsToAssignee

	Project taskBelongsToProject

	Sprint taskBelongsToSprint

	fieldMap map[string]field.Expr
}

func (t task) Table(newTableName string) *task {
	t.taskDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t task) As(alias string) *task {
	t.taskDo.DO = *(t.taskDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *task) updateTableName(table string) *task {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.Title = field.NewString(table, "title")
	t.Description = field.NewString(table, "description")
	t.AssigneeID = field.NewInt(table, "assignee_id")
	t.ProjectID = field.NewInt(table, "project_id")
	t.SprintID = field.NewInt(table, "sprint_id")
	t.Status = field.NewString(table, "status")
	t.Priority = field.NewString(table, "priority")
	t.DueDate = field.NewTime(table, "due_date")

	t.fillFieldMap()

	return t
}

func (t *task) WithContext(ctx context.Context) ITaskDo { return t.taskDo.WithContext(ctx) }

func (t task) TableName() string { return t.taskDo.TableName() }

func (t task) Alias() string { return t.taskDo.Alias() }

func (t task) Columns(cols ...field.Expr) gen.Columns { return t.taskDo.Columns(cols...) }

func (t *task) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *task) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["title"] = t.Title
	t.fieldMap["description"] = t.Description
	t.fieldMap["assignee_id"] = t.AssigneeID
	t.fieldMap["project_id"] = t.ProjectID
	t.fieldMap["sprint_id"] = t.SprintID
	t.fieldMap["status"] = t.Status
	t.fieldMap["priority"] = t.Priority
	t.fieldMap["due_date"] = t.DueDate

}

func (t task) clone(db *gorm.DB) task {
	t.taskDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t task) replaceDB(db *gorm.DB) task {
	t.taskDo.ReplaceDB(db)
	return t
}

type taskBelongsToAssignee struct {
	db *gorm.DB

	field.RelationField

	CurrentProject struct {
		field.RelationField
		Manager struct {
			field.RelationField
		}
		Tasks struct {
			field.RelationField
			Assignee struct {
				field.RelationField
			}
			Project struct {
				field.RelationField
			}
			Sprint struct {
				field.RelationField
				Project struct {
					field.RelationField
				}
				Tasks struct {
					field.RelationField
				}
			}
		}
		Sprints struct {
			field.RelationField
		}
		TeamMembers struct {
			field.RelationField
		}
	}
	ManagedProjects struct {
		field.RelationField
	}
	AssignedTasks struct {
		field.RelationField
	}
}

func (a taskBelongsToAssignee) Where(conds ...field.Expr) *taskBelongsToAssignee {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a taskBelongsToAssignee) WithContext(ctx context.Context) *taskBelongsToAssignee {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a taskBelongsToAssignee) Session(session *gorm.Session) *taskBelongsToAssignee {
	a.db = a.db.Session(session)
	return &a
}

func (a taskBelongsToAssignee) Model(m *models.Task) *taskBelongsToAssigneeTx {
	return &taskBelongsToAssigneeTx{a.db.Model(m).Association(a.Name())}
}

type taskBelongsToAssigneeTx struct{ tx *gorm.Association }

func (a taskBelongsToAssigneeTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a taskBelongsToAssigneeTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a taskBelongsToAssigneeTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a taskBelongsToAssigneeTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a taskBelongsToAssigneeTx) Clear() error {
	return a.tx.Clear()
}

func (a taskBelongsToAssigneeTx) Count() int64 {
	return a.tx.Count()
}

type taskBelongsToProject struct {
	db *gorm.DB

	field.RelationField
}

func (a taskBelongsToProject) Where(conds ...field.Expr) *taskBelongsToProject {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a taskBelongsToProject) WithContext(ctx context.Context) *taskBelongsToProject {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a taskBelongsToProject) Session(session *gorm.Session) *taskBelongsToProject {
	a.db = a.db.Session(session)
	return &a
}

func (a taskBelongsToProject) Model(m *models.Task) *taskBelongsToProjectTx {
	return &taskBelongsToProjectTx{a.db.Model(m).Association(a.Name())}
}

type taskBelongsToProjectTx struct{ tx *gorm.Association }

func (a taskBelongsToProjectTx) Find() (result *models.Project, err error) {
	return result, a.tx.Find(&result)
}

func (a taskBelongsToProjectTx) Append(values ...*models.Project) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a taskBelongsToProjectTx) Replace(values ...*models.Project) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a taskBelongsToProjectTx) Delete(values ...*models.Project) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a taskBelongsToProjectTx) Clear() error {
	return a.tx.Clear()
}

func (a taskBelongsToProjectTx) Count() int64 {
	return a.tx.Count()
}

type taskBelongsToSprint struct {
	db *gorm.DB

	field.RelationField
}

func (a taskBelongsToSprint) Where(conds ...field.Expr) *taskBelongsToSprint {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a taskBelongsToSprint) WithContext(ctx context.Context) *taskBelongsToSprint {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a taskBelongsToSprint) Session(session *gorm.Session) *taskBelongsToSprint {
	a.db = a.db.Session(session)
	return &a
}

func (a taskBelongsToSprint) Model(m *models.Task) *taskBelongsToSprintTx {
	return &taskBelongsToSprintTx{a.db.Model(m).Association(a.Name())}
}

type taskBelongsToSprintTx struct{ tx *gorm.Association }

func (a taskBelongsToSprintTx) Find() (result *models.Sprint, err error) {
	return result, a.tx.Find(&result)
}

func (a taskBelongsToSprintTx) Append(values ...*models.Sprint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a taskBelongsToSprintTx) Replace(values ...*models.Sprint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a taskBelongsToSprintTx) Delete(values ...*models.Sprint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a taskBelongsToSprintTx) Clear() error {
	return a.tx.Clear()
}

func (a taskBelongsToSprintTx) Count() int64 {
	return a.tx.Count()
}

type taskDo struct{ gen.DO }

type ITaskDo interface {
	gen.SubQuery
	Debug() ITaskDo
	WithContext(ctx context.Context) ITaskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITaskDo
	WriteDB() ITaskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITaskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITaskDo
	Not(conds ...gen.Condition) ITaskDo
	Or(conds ...gen.Condition) ITaskDo
	Select(conds ...field.Expr) ITaskDo
	Where(conds ...gen.Condition) ITaskDo
	Order(conds ...field.Expr) ITaskDo
	Distinct(cols ...field.Expr) ITaskDo
	Omit(cols ...field.Expr) ITaskDo
	Join(table schema.Tabler, on ...field.Expr) ITaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITaskDo
	Group(cols ...field.Expr) ITaskDo
	Having(conds ...gen.Condition) ITaskDo
	Limit(limit int) ITaskDo
	Offset(offset int) ITaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskDo
	Unscoped() ITaskDo
	Create(values ...*models.Task) error
	CreateInBatches(values []*models.Task, batchSize int) error
	Save(values ...*models.Task) error
	First() (*models.Task, error)
	Take() (*models.Task, error)
	Last() (*models.Task, error)
	Find() ([]*models.Task, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Task, err error)
	FindInBatches(result *[]*models.Task, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Task) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITaskDo
	Assign(attrs ...field.AssignExpr) ITaskDo
	Joins(fields ...field.RelationField) ITaskDo
	Preload(fields ...field.RelationField) ITaskDo
	FirstOrInit() (*models.Task, error)
	FirstOrCreate() (*models.Task, error)
	FindByPage(offset int, limit int) (result []*models.Task, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t taskDo) Debug() ITaskDo {
	return t.withDO(t.DO.Debug())
}

func (t taskDo) WithContext(ctx context.Context) ITaskDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskDo) ReadDB() ITaskDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskDo) WriteDB() ITaskDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskDo) Session(config *gorm.Session) ITaskDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskDo) Clauses(conds ...clause.Expression) ITaskDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskDo) Returning(value interface{}, columns ...string) ITaskDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskDo) Not(conds ...gen.Condition) ITaskDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskDo) Or(conds ...gen.Condition) ITaskDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskDo) Select(conds ...field.Expr) ITaskDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskDo) Where(conds ...gen.Condition) ITaskDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskDo) Order(conds ...field.Expr) ITaskDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskDo) Distinct(cols ...field.Expr) ITaskDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskDo) Omit(cols ...field.Expr) ITaskDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskDo) Join(table schema.Tabler, on ...field.Expr) ITaskDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITaskDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskDo) RightJoin(table schema.Tabler, on ...field.Expr) ITaskDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskDo) Group(cols ...field.Expr) ITaskDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskDo) Having(conds ...gen.Condition) ITaskDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskDo) Limit(limit int) ITaskDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskDo) Offset(offset int) ITaskDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskDo) Unscoped() ITaskDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskDo) Create(values ...*models.Task) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskDo) CreateInBatches(values []*models.Task, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskDo) Save(values ...*models.Task) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskDo) First() (*models.Task, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Task), nil
	}
}

func (t taskDo) Take() (*models.Task, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Task), nil
	}
}

func (t taskDo) Last() (*models.Task, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Task), nil
	}
}

func (t taskDo) Find() ([]*models.Task, error) {
	result, err := t.DO.Find()
	return result.([]*models.Task), err
}

func (t taskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Task, err error) {
	buf := make([]*models.Task, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskDo) FindInBatches(result *[]*models.Task, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskDo) Attrs(attrs ...field.AssignExpr) ITaskDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskDo) Assign(attrs ...field.AssignExpr) ITaskDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskDo) Joins(fields ...field.RelationField) ITaskDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskDo) Preload(fields ...field.RelationField) ITaskDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskDo) FirstOrInit() (*models.Task, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Task), nil
	}
}

func (t taskDo) FirstOrCreate() (*models.Task, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Task), nil
	}
}

func (t taskDo) FindByPage(offset int, limit int) (result []*models.Task, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskDo) Delete(models ...*models.Task) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskDo) withDO(do gen.Dao) *taskDo {
	t.DO = *do.(*gen.DO)
	return t
}
