// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Authenticates a user and returns a token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/dto.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid credentials or input",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves details of the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get current user",
                "responses": {
                    "302": {
                        "description": "User found",
                        "schema": {
                            "$ref": "#/definitions/dto.UserSuccessResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects": {
            "get": {
                "description": "Retrieves projects based on optional query parameters (id, name, status, managerid, startdate, enddate)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "List projects with filters",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Project name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ACTIVE",
                            "INACTIVE",
                            "COMPLETED"
                        ],
                        "type": "string",
                        "description": "Project status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Manager ID",
                        "name": "managerid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date after (format: YYYY-MM-DD)",
                        "name": "startdate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date before (format: YYYY-MM-DD)",
                        "name": "enddate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Projects found",
                        "schema": {
                            "$ref": "#/definitions/dto.ProjectSliceSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new project with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Create a new project",
                "parameters": [
                    {
                        "description": "Project creation request",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Project created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.ProjectSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}": {
            "get": {
                "description": "Retrieves details of a specific project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Get a project by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project found",
                        "schema": {
                            "$ref": "#/definitions/dto.ProjectSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid project ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Project not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the details of an existing project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Update a project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Project update request",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateProjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project updated",
                        "schema": {
                            "$ref": "#/definitions/dto.ProjectSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input or project ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Delete a project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid project ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Project not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/members": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds one or more users to a project as team members",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Add team members to a project",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "List of user IDs to add",
                        "name": "members",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.AddTeamMembersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Team members added successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.IntSuccessResponse"
                        }
                    },
                    "207": {
                        "description": "Some team members added successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.AddTeamMembersPartialSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input or project ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/projects/{projectId}/tasks": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all tasks associated with a specific project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get tasks by project ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Tasks found",
                        "schema": {
                            "$ref": "#/definitions/dto.TaskSliceSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid project ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Project not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sprints": {
            "get": {
                "description": "Retrieves sprints based on optional query parameters (id, name, projectid, startdate, enddate)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sprints"
                ],
                "summary": "Find sprints with filters",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Sprint ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sprint name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Project ID",
                        "name": "projectid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date after (format: YYYY-MM-DD)",
                        "name": "startdate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date before (format: YYYY-MM-DD)",
                        "name": "enddate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sprints found",
                        "schema": {
                            "$ref": "#/definitions/dto.SprintSliceSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new sprint for a specific project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sprints"
                ],
                "summary": "Create a new sprint",
                "parameters": [
                    {
                        "description": "Sprint creation request",
                        "name": "sprint",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateSprintRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Sprint created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.SprintSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input or dates",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Project not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sprints/{sprintId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves details of a specific sprint",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sprints"
                ],
                "summary": "Get a sprint by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Sprint ID",
                        "name": "sprintId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sprint found",
                        "schema": {
                            "$ref": "#/definitions/dto.SprintSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid sprint ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Sprint not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the details of an existing sprint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sprints"
                ],
                "summary": "Update a sprint",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Sprint ID",
                        "name": "sprintId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sprint update request",
                        "name": "sprint",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateSprintRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sprint updated",
                        "schema": {
                            "$ref": "#/definitions/dto.SprintSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input or sprint ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific sprint",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sprints"
                ],
                "summary": "Delete a sprint",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Sprint ID",
                        "name": "sprintId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sprint deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid sprint ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Sprint not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "description": "Retrieves tasks based on optional query parameters (id, title, status, priority, due_date_before)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Find tasks with filters",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Task title",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "OPEN",
                            "IN_PROGRESS",
                            "DONE"
                        ],
                        "type": "string",
                        "description": "Task status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "LOW",
                            "MEDIUM",
                            "HIGH"
                        ],
                        "type": "string",
                        "description": "Task priority",
                        "name": "priority",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Due date before (format: YYYY-MM-DD)",
                        "name": "due_date_before",
                        "in": "query"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Tasks found",
                        "schema": {
                            "$ref": "#/definitions/dto.TaskSliceSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new task with the provided details for a specific sprint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create a new task",
                "parameters": [
                    {
                        "description": "Task creation request",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Task created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.TaskSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Sprint not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tasks/{taskId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves details of a specific task",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get a task by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Task found",
                        "schema": {
                            "$ref": "#/definitions/dto.TaskSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid task ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Task not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the details of an existing task",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Update a task",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task update request",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Task updated",
                        "schema": {
                            "$ref": "#/definitions/dto.TaskSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input or task ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Task not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific task",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Delete a task",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Task deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid task ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Task not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tasks/{taskId}/user/{userId}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Assigns a specific task to a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Assign task to user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Task assigned successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid IDs or user not in project",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User not authorized",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - Task or user not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Retrieves a list of all users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "Users found",
                        "schema": {
                            "$ref": "#/definitions/dto.UserSliceSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Database error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new user with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User creation request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.UserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input or validation failure",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{userId}": {
            "get": {
                "description": "Retrieves a user based on the provided ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "User found",
                        "schema": {
                            "$ref": "#/definitions/dto.UserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing user's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User update request",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "User updated",
                        "schema": {
                            "$ref": "#/definitions/dto.UserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input or ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a user based on the provided ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted",
                        "schema": {
                            "$ref": "#/definitions/dto.GenericSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid ID or user not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{userId}/tasks": {
            "get": {
                "description": "Retrieves all tasks assigned to a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get tasks by user ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Tasks found",
                        "schema": {
                            "$ref": "#/definitions/dto.TaskSliceSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - User not found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AddTeamMembersPartialSuccessResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string",
                    "example": "User with ID 3 not found"
                },
                "message": {
                    "type": "string",
                    "example": "Some users could not be added to the project"
                },
                "updated_count": {
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "dto.AddTeamMembersRequest": {
            "type": "object"
        },
        "dto.CreateProjectRequest": {
            "type": "object",
            "required": [
                "name",
                "start_date"
            ],
            "properties": {
                "description": {
                    "description": "Description is an optional detailed description of the project.",
                    "type": "string",
                    "maxLength": 65535,
                    "example": "Redesign the company website to improve UX."
                },
                "end_date": {
                    "description": "EndDate is the optional date when the project is expected to end.",
                    "type": "string",
                    "example": "2025-06-15T00:00:00Z"
                },
                "name": {
                    "description": "Name is the name of the project.",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2,
                    "example": "Website Redesign"
                },
                "start_date": {
                    "description": "StartDate is the date when the project begins.",
                    "type": "string",
                    "example": "2025-04-10T00:00:00Z"
                },
                "status": {
                    "description": "Status is the current status of the project.",
                    "enum": [
                        "ACTIVE",
                        "ON_HOLD",
                        "COMPLETED",
                        "CANCELLED"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ProjectStatus"
                        }
                    ],
                    "example": "ACTIVE"
                }
            }
        },
        "dto.CreateSprintRequest": {
            "type": "object",
            "required": [
                "end_date",
                "goal",
                "name",
                "project_id",
                "start_date"
            ],
            "properties": {
                "end_date": {
                    "description": "EndDate is the date when the sprint ends.",
                    "type": "string",
                    "example": "2025-04-30T00:00:00Z"
                },
                "goal": {
                    "description": "Goal is the objective or goal of the sprint.",
                    "type": "string",
                    "minLength": 5,
                    "example": "Complete initial UI design"
                },
                "name": {
                    "description": "Name is the name of the sprint.",
                    "type": "string",
                    "minLength": 2,
                    "example": "Sprint 1"
                },
                "project_id": {
                    "description": "ProjectID is the ID of the project this sprint belongs to.",
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "start_date": {
                    "description": "StartDate is the date when the sprint begins.",
                    "type": "string",
                    "example": "2025-04-15T00:00:00Z"
                }
            }
        },
        "dto.CreateTaskRequest": {
            "type": "object",
            "required": [
                "sprint_id",
                "title"
            ],
            "properties": {
                "description": {
                    "description": "Description is an optional detailed description of the task.",
                    "type": "string",
                    "maxLength": 65535,
                    "example": "Create a RESTful endpoint for user authentication."
                },
                "due_date": {
                    "description": "DueDate is the optional due date of the task.",
                    "type": "string",
                    "example": "2025-04-20T00:00:00Z"
                },
                "priority": {
                    "description": "Priority is the priority level of the task.",
                    "enum": [
                        "HIGH",
                        "MEDIUM",
                        "LOW",
                        "CRITICAL"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TaskPriority"
                        }
                    ],
                    "example": "HIGH"
                },
                "sprint_id": {
                    "description": "SprintID is the ID of the sprint this task belongs to.",
                    "type": "integer",
                    "minimum": 1,
                    "example": 1
                },
                "status": {
                    "description": "Status is the current status of the task.",
                    "enum": [
                        "TO_DO",
                        "IN_PROGRESS",
                        "REVIEW",
                        "DONE",
                        "BLOCKED"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TaskStatus"
                        }
                    ],
                    "example": "TO_DO"
                },
                "title": {
                    "description": "Title is the title of the task.",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2,
                    "example": "Implement login API"
                }
            }
        },
        "dto.CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "Email is the user's email address.",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "description": "FirstName is the user's first name.",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2,
                    "example": "John"
                },
                "last_name": {
                    "description": "LastName is the user's last name.",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2,
                    "example": "Doe"
                },
                "password": {
                    "description": "Password is the user's password.",
                    "type": "string",
                    "minLength": 8,
                    "example": "securepassword123"
                },
                "role": {
                    "description": "Role is the user's role in the system.",
                    "enum": [
                        "TEAM_MEMBER",
                        "PROJECT_MANAGER",
                        "ADMIN"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    ],
                    "example": "TEAM_MEMBER"
                }
            }
        },
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {},
                "message": {
                    "type": "string",
                    "example": "An error occurred"
                }
            }
        },
        "dto.GenericSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                }
            }
        },
        "dto.IntSuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "integer",
                    "example": 3
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "Email is the user's email address.",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "password": {
                    "description": "Password is the user's password.",
                    "type": "string",
                    "minLength": 8,
                    "example": "securepassword123"
                }
            }
        },
        "dto.ProjectResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is the detailed description of the project.",
                    "type": "string",
                    "example": "Redesign the company website to improve UX."
                },
                "end_date": {
                    "description": "EndDate is the date when the project is expected to end (optional).",
                    "type": "string",
                    "example": "2025-06-15T00:00:00Z"
                },
                "id": {
                    "description": "ID is the unique identifier of the project.",
                    "type": "integer",
                    "example": 1
                },
                "manager_id": {
                    "description": "ManagerID is the ID of the project manager.",
                    "type": "integer",
                    "example": 42
                },
                "name": {
                    "description": "Name is the name of the project.",
                    "type": "string",
                    "example": "Website Redesign"
                },
                "start_date": {
                    "description": "StartDate is the date when the project started.",
                    "type": "string",
                    "example": "2025-04-10T00:00:00Z"
                },
                "status": {
                    "description": "Status is the current status of the project.",
                    "type": "string",
                    "example": "ACTIVE"
                },
                "team_member_count": {
                    "description": "TeamMemberCount is the total number of team members (optional).",
                    "type": "integer",
                    "example": 3
                },
                "team_members": {
                    "description": "TeamMembers is the list of team members assigned to the project (optional).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TeamMember"
                    }
                }
            }
        },
        "dto.ProjectSliceSuccessResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 5
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ProjectResponse"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Items found successfully"
                }
            }
        },
        "dto.ProjectSuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.ProjectResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                }
            }
        },
        "dto.SprintResponse": {
            "type": "object",
            "properties": {
                "end_date": {
                    "description": "EndDate is the date when the sprint ends.",
                    "type": "string",
                    "example": "2025-04-30T00:00:00Z"
                },
                "goal": {
                    "description": "Goal is the objective or goal of the sprint.",
                    "type": "string",
                    "example": "Complete initial UI design"
                },
                "id": {
                    "description": "ID is the unique identifier of the sprint.",
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "description": "Name is the name of the sprint.",
                    "type": "string",
                    "example": "Sprint 1"
                },
                "project_id": {
                    "description": "ProjectID is the ID of the project this sprint belongs to.",
                    "type": "integer",
                    "example": 1
                },
                "project_name": {
                    "description": "ProjectName is the optional name of the associated project.",
                    "type": "string",
                    "example": "Website Redesign"
                },
                "start_date": {
                    "description": "StartDate is the date when the sprint started.",
                    "type": "string",
                    "example": "2025-04-15T00:00:00Z"
                },
                "task_count": {
                    "description": "TaskCount is the total number of tasks in the sprint (optional).",
                    "type": "integer",
                    "example": 3
                },
                "tasks": {
                    "description": "Tasks is the list of tasks within the sprint (optional).",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TaskInSprintResponse"
                    }
                }
            }
        },
        "dto.SprintSliceSuccessResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 5
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SprintResponse"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Items found successfully"
                }
            }
        },
        "dto.SprintSuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.SprintResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                }
            }
        },
        "dto.TaskInSprintResponse": {
            "type": "object",
            "properties": {
                "due_date": {
                    "description": "DueDate is the optional due date of the task.",
                    "type": "string",
                    "example": "2025-04-25T00:00:00Z"
                },
                "id": {
                    "description": "ID is the unique identifier of the task.",
                    "type": "integer",
                    "example": 101
                },
                "priority": {
                    "description": "Priority is the priority level of the task.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TaskPriority"
                        }
                    ],
                    "example": "HIGH"
                },
                "status": {
                    "description": "Status is the current status of the task.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TaskStatus"
                        }
                    ],
                    "example": "IN_PROGRESS"
                },
                "task": {
                    "description": "Title is the title or description of the task.",
                    "type": "string",
                    "example": "Design homepage layout"
                }
            }
        },
        "dto.TaskResponse": {
            "type": "object",
            "properties": {
                "assignee_first_name": {
                    "description": "AssigneeFirstName is the optional first name of the assignee.",
                    "type": "string",
                    "example": "John"
                },
                "assignee_id": {
                    "description": "AssigneeID is the optional ID of the user assigned to the task.",
                    "type": "integer",
                    "example": 42
                },
                "assignee_last_name": {
                    "description": "AssigneeLastName is the optional last name of the assignee.",
                    "type": "string",
                    "example": "Doe"
                },
                "description": {
                    "description": "Description is the detailed description of the task.",
                    "type": "string",
                    "example": "Create a RESTful endpoint for user authentication."
                },
                "due_date": {
                    "description": "DueDate is the optional due date of the task.",
                    "type": "string",
                    "example": "2025-04-20T00:00:00Z"
                },
                "id": {
                    "description": "ID is the unique identifier of the task.",
                    "type": "integer",
                    "example": 101
                },
                "priority": {
                    "description": "Priority is the priority level of the task.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TaskPriority"
                        }
                    ],
                    "example": "HIGH"
                },
                "project_id": {
                    "description": "ProjectID is the ID of the project this task belongs to.",
                    "type": "integer",
                    "example": 1
                },
                "project_name": {
                    "description": "ProjectName is the name of the project this task belongs to.",
                    "type": "string",
                    "example": "Website Redesign"
                },
                "sprint_id": {
                    "description": "SprintID is the ID of the sprint this task belongs to.",
                    "type": "integer",
                    "example": 1
                },
                "sprint_name": {
                    "description": "SprintName is the name of the sprint this task belongs to.",
                    "type": "string",
                    "example": "Sprint 1"
                },
                "status": {
                    "description": "Status is the current status of the task.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TaskStatus"
                        }
                    ],
                    "example": "IN_PROGRESS"
                },
                "title": {
                    "description": "Title is the title of the task.",
                    "type": "string",
                    "example": "Implement login API"
                }
            }
        },
        "dto.TaskSliceSuccessResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 5
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TaskResponse"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Items found successfully"
                }
            }
        },
        "dto.TaskSuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.TaskResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                }
            }
        },
        "dto.TeamMember": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email is the email address of the team member.",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "description": "FirstName is the first name of the team member.",
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "description": "ID is the unique identifier of the team member.",
                    "type": "integer",
                    "example": 101
                },
                "last_name": {
                    "description": "LastName is the last name of the team member.",
                    "type": "string",
                    "example": "Doe"
                }
            }
        },
        "dto.TokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "random-token"
                }
            }
        },
        "dto.UpdateProjectRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is the optional new description of the project.",
                    "type": "string",
                    "maxLength": 65535,
                    "example": "Updated redesign with new features."
                },
                "end_date": {
                    "description": "EndDate is the optional new end date of the project.",
                    "type": "string",
                    "example": "2025-07-01T00:00:00Z"
                },
                "name": {
                    "description": "Name is the optional new name of the project.",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2,
                    "example": "Website Redesign v2"
                },
                "status": {
                    "description": "Status is the optional new status of the project.",
                    "enum": [
                        "ACTIVE",
                        "ON_HOLD",
                        "COMPLETED",
                        "CANCELLED"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ProjectStatus"
                        }
                    ],
                    "example": "ON_HOLD"
                }
            }
        },
        "dto.UpdateSprintRequest": {
            "type": "object",
            "properties": {
                "end_date": {
                    "description": "EndDate is the optional new end date of the sprint.",
                    "type": "string",
                    "example": "2025-05-05T00:00:00Z"
                },
                "goal": {
                    "description": "Goal is the optional new goal of the sprint.",
                    "type": "string",
                    "minLength": 5,
                    "example": "Finalize UI and start backend integration"
                },
                "name": {
                    "description": "Name is the optional new name of the sprint.",
                    "type": "string",
                    "minLength": 2,
                    "example": "Sprint 1 - Revised"
                },
                "start_date": {
                    "description": "StartDate is the optional new start date of the sprint.",
                    "type": "string",
                    "example": "2025-04-20T00:00:00Z"
                }
            }
        },
        "dto.UpdateTaskRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is the optional new description of the task.",
                    "type": "string",
                    "maxLength": 65535,
                    "example": "Modify endpoint to include JWT."
                },
                "due_date": {
                    "description": "DueDate is the optional new due date of the task.",
                    "type": "string",
                    "example": "2025-04-25T00:00:00Z"
                },
                "priority": {
                    "description": "Priority is the optional new priority level of the task.",
                    "enum": [
                        "HIGH",
                        "MEDIUM",
                        "LOW",
                        "CRITICAL"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TaskPriority"
                        }
                    ],
                    "example": "MEDIUM"
                },
                "status": {
                    "description": "Status is the optional new status of the task.",
                    "enum": [
                        "TO_DO",
                        "IN_PROGRESS",
                        "REVIEW",
                        "DONE",
                        "BLOCKED"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TaskStatus"
                        }
                    ],
                    "example": "REVIEW"
                },
                "title": {
                    "description": "Title is the optional new title of the task.",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2,
                    "example": "Update login API"
                }
            }
        },
        "dto.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "first_name": {
                    "description": "FirstName is the optional new first name of the user.",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2,
                    "example": "Johnny"
                },
                "last_name": {
                    "description": "LastName is the optional new last name of the user.",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2,
                    "example": "Smith"
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "current_project_id": {
                    "description": "CurrentProjectID is the optional ID of the user's current project.",
                    "type": "integer",
                    "example": 1
                },
                "current_project_name": {
                    "description": "CurrentProjectName is the optional name of the user's current project.",
                    "type": "string",
                    "example": "Website Redesign"
                },
                "email": {
                    "description": "Email is the user's email address.",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "description": "FirstName is the user's first name.",
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "description": "ID is the unique identifier of the user.",
                    "type": "integer",
                    "example": 42
                },
                "last_name": {
                    "description": "LastName is the user's last name.",
                    "type": "string",
                    "example": "Doe"
                },
                "role": {
                    "description": "Role is the user's role in the system.",
                    "type": "string",
                    "example": "TEAM_MEMBER"
                }
            }
        },
        "dto.UserSliceSuccessResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 5
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserResponse"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Items found successfully"
                }
            }
        },
        "dto.UserSuccessResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.UserResponse"
                },
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                }
            }
        },
        "models.ProjectStatus": {
            "type": "string",
            "enum": [
                "ACTIVE",
                "COMPLETED",
                "ON_HOLD",
                "CANCELLED"
            ],
            "x-enum-varnames": [
                "StatusActive",
                "StatusCompleted",
                "StatusOnHold",
                "StatusCancelled"
            ]
        },
        "models.TaskPriority": {
            "type": "string",
            "enum": [
                "HIGH",
                "MEDIUM",
                "LOW",
                "CRITICAL"
            ],
            "x-enum-varnames": [
                "HighPriority",
                "MediumPriority",
                "LowPriority",
                "CriticalPriority"
            ]
        },
        "models.TaskStatus": {
            "type": "string",
            "enum": [
                "TO_DO",
                "IN_PROGRESS",
                "REVIEW",
                "DONE",
                "BLOCKED"
            ],
            "x-enum-varnames": [
                "ToDoTask",
                "InProgressTask",
                "ReviewTask",
                "DoneTask",
                "BlockedTask"
            ]
        },
        "models.UserRole": {
            "type": "string",
            "enum": [
                "ADMIN",
                "PROJECT_MANAGER",
                "TEAM_MEMBER"
            ],
            "x-enum-varnames": [
                "Admin",
                "ProjectManager",
                "TeamMember"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "Fiber Example API",
	Description:      "This is a sample swagger for Fiber",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
