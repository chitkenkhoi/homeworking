// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"lqkhoi-go-http-api/internal/models"
)

func newProject(db *gorm.DB, opts ...gen.DOOption) project {
	_project := project{}

	_project.projectDo.UseDB(db, opts...)
	_project.projectDo.UseModel(&models.Project{})

	tableName := _project.projectDo.TableName()
	_project.ALL = field.NewAsterisk(tableName)
	_project.ID = field.NewInt(tableName, "id")
	_project.CreatedAt = field.NewTime(tableName, "created_at")
	_project.UpdatedAt = field.NewTime(tableName, "updated_at")
	_project.DeletedAt = field.NewField(tableName, "deleted_at")
	_project.Name = field.NewString(tableName, "name")
	_project.Description = field.NewString(tableName, "description")
	_project.StartDate = field.NewTime(tableName, "start_date")
	_project.EndDate = field.NewTime(tableName, "end_date")
	_project.Status = field.NewString(tableName, "status")
	_project.ManagerID = field.NewInt(tableName, "manager_id")
	_project.Tasks = projectHasManyTasks{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Tasks", "models.Task"),
		Assignee: struct {
			field.RelationField
			CurrentProject struct {
				field.RelationField
				Manager struct {
					field.RelationField
				}
				Tasks struct {
					field.RelationField
				}
				Sprints struct {
					field.RelationField
					Project struct {
						field.RelationField
					}
					Tasks struct {
						field.RelationField
					}
				}
				TeamMembers struct {
					field.RelationField
				}
			}
			ManagedProjects struct {
				field.RelationField
			}
			AssignedTasks struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Tasks.Assignee", "models.User"),
			CurrentProject: struct {
				field.RelationField
				Manager struct {
					field.RelationField
				}
				Tasks struct {
					field.RelationField
				}
				Sprints struct {
					field.RelationField
					Project struct {
						field.RelationField
					}
					Tasks struct {
						field.RelationField
					}
				}
				TeamMembers struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Tasks.Assignee.CurrentProject", "models.Project"),
				Manager: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Tasks.Assignee.CurrentProject.Manager", "models.User"),
				},
				Tasks: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Tasks.Assignee.CurrentProject.Tasks", "models.Task"),
				},
				Sprints: struct {
					field.RelationField
					Project struct {
						field.RelationField
					}
					Tasks struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Tasks.Assignee.CurrentProject.Sprints", "models.Sprint"),
					Project: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Tasks.Assignee.CurrentProject.Sprints.Project", "models.Project"),
					},
					Tasks: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Tasks.Assignee.CurrentProject.Sprints.Tasks", "models.Task"),
					},
				},
				TeamMembers: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Tasks.Assignee.CurrentProject.TeamMembers", "models.User"),
				},
			},
			ManagedProjects: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Tasks.Assignee.ManagedProjects", "models.Project"),
			},
			AssignedTasks: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Tasks.Assignee.AssignedTasks", "models.Task"),
			},
		},
		Project: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Tasks.Project", "models.Project"),
		},
		Sprint: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Tasks.Sprint", "models.Sprint"),
		},
	}

	_project.Sprints = projectHasManySprints{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Sprints", "models.Sprint"),
	}

	_project.TeamMembers = projectHasManyTeamMembers{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("TeamMembers", "models.User"),
	}

	_project.Manager = projectBelongsToManager{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Manager", "models.User"),
	}

	_project.fillFieldMap()

	return _project
}

type project struct {
	projectDo projectDo

	ALL         field.Asterisk
	ID          field.Int
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Name        field.String
	Description field.String
	StartDate   field.Time
	EndDate     field.Time
	Status      field.String
	ManagerID   field.Int
	Tasks       projectHasManyTasks

	Sprints projectHasManySprints

	TeamMembers projectHasManyTeamMembers

	Manager projectBelongsToManager

	fieldMap map[string]field.Expr
}

func (p project) Table(newTableName string) *project {
	p.projectDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p project) As(alias string) *project {
	p.projectDo.DO = *(p.projectDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *project) updateTableName(table string) *project {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Name = field.NewString(table, "name")
	p.Description = field.NewString(table, "description")
	p.StartDate = field.NewTime(table, "start_date")
	p.EndDate = field.NewTime(table, "end_date")
	p.Status = field.NewString(table, "status")
	p.ManagerID = field.NewInt(table, "manager_id")

	p.fillFieldMap()

	return p
}

func (p *project) WithContext(ctx context.Context) IProjectDo { return p.projectDo.WithContext(ctx) }

func (p project) TableName() string { return p.projectDo.TableName() }

func (p project) Alias() string { return p.projectDo.Alias() }

func (p project) Columns(cols ...field.Expr) gen.Columns { return p.projectDo.Columns(cols...) }

func (p *project) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *project) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 14)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["name"] = p.Name
	p.fieldMap["description"] = p.Description
	p.fieldMap["start_date"] = p.StartDate
	p.fieldMap["end_date"] = p.EndDate
	p.fieldMap["status"] = p.Status
	p.fieldMap["manager_id"] = p.ManagerID

}

func (p project) clone(db *gorm.DB) project {
	p.projectDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p project) replaceDB(db *gorm.DB) project {
	p.projectDo.ReplaceDB(db)
	return p
}

type projectHasManyTasks struct {
	db *gorm.DB

	field.RelationField

	Assignee struct {
		field.RelationField
		CurrentProject struct {
			field.RelationField
			Manager struct {
				field.RelationField
			}
			Tasks struct {
				field.RelationField
			}
			Sprints struct {
				field.RelationField
				Project struct {
					field.RelationField
				}
				Tasks struct {
					field.RelationField
				}
			}
			TeamMembers struct {
				field.RelationField
			}
		}
		ManagedProjects struct {
			field.RelationField
		}
		AssignedTasks struct {
			field.RelationField
		}
	}
	Project struct {
		field.RelationField
	}
	Sprint struct {
		field.RelationField
	}
}

func (a projectHasManyTasks) Where(conds ...field.Expr) *projectHasManyTasks {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a projectHasManyTasks) WithContext(ctx context.Context) *projectHasManyTasks {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a projectHasManyTasks) Session(session *gorm.Session) *projectHasManyTasks {
	a.db = a.db.Session(session)
	return &a
}

func (a projectHasManyTasks) Model(m *models.Project) *projectHasManyTasksTx {
	return &projectHasManyTasksTx{a.db.Model(m).Association(a.Name())}
}

type projectHasManyTasksTx struct{ tx *gorm.Association }

func (a projectHasManyTasksTx) Find() (result []*models.Task, err error) {
	return result, a.tx.Find(&result)
}

func (a projectHasManyTasksTx) Append(values ...*models.Task) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a projectHasManyTasksTx) Replace(values ...*models.Task) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a projectHasManyTasksTx) Delete(values ...*models.Task) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a projectHasManyTasksTx) Clear() error {
	return a.tx.Clear()
}

func (a projectHasManyTasksTx) Count() int64 {
	return a.tx.Count()
}

type projectHasManySprints struct {
	db *gorm.DB

	field.RelationField
}

func (a projectHasManySprints) Where(conds ...field.Expr) *projectHasManySprints {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a projectHasManySprints) WithContext(ctx context.Context) *projectHasManySprints {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a projectHasManySprints) Session(session *gorm.Session) *projectHasManySprints {
	a.db = a.db.Session(session)
	return &a
}

func (a projectHasManySprints) Model(m *models.Project) *projectHasManySprintsTx {
	return &projectHasManySprintsTx{a.db.Model(m).Association(a.Name())}
}

type projectHasManySprintsTx struct{ tx *gorm.Association }

func (a projectHasManySprintsTx) Find() (result []*models.Sprint, err error) {
	return result, a.tx.Find(&result)
}

func (a projectHasManySprintsTx) Append(values ...*models.Sprint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a projectHasManySprintsTx) Replace(values ...*models.Sprint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a projectHasManySprintsTx) Delete(values ...*models.Sprint) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a projectHasManySprintsTx) Clear() error {
	return a.tx.Clear()
}

func (a projectHasManySprintsTx) Count() int64 {
	return a.tx.Count()
}

type projectHasManyTeamMembers struct {
	db *gorm.DB

	field.RelationField
}

func (a projectHasManyTeamMembers) Where(conds ...field.Expr) *projectHasManyTeamMembers {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a projectHasManyTeamMembers) WithContext(ctx context.Context) *projectHasManyTeamMembers {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a projectHasManyTeamMembers) Session(session *gorm.Session) *projectHasManyTeamMembers {
	a.db = a.db.Session(session)
	return &a
}

func (a projectHasManyTeamMembers) Model(m *models.Project) *projectHasManyTeamMembersTx {
	return &projectHasManyTeamMembersTx{a.db.Model(m).Association(a.Name())}
}

type projectHasManyTeamMembersTx struct{ tx *gorm.Association }

func (a projectHasManyTeamMembersTx) Find() (result []*models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a projectHasManyTeamMembersTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a projectHasManyTeamMembersTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a projectHasManyTeamMembersTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a projectHasManyTeamMembersTx) Clear() error {
	return a.tx.Clear()
}

func (a projectHasManyTeamMembersTx) Count() int64 {
	return a.tx.Count()
}

type projectBelongsToManager struct {
	db *gorm.DB

	field.RelationField
}

func (a projectBelongsToManager) Where(conds ...field.Expr) *projectBelongsToManager {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a projectBelongsToManager) WithContext(ctx context.Context) *projectBelongsToManager {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a projectBelongsToManager) Session(session *gorm.Session) *projectBelongsToManager {
	a.db = a.db.Session(session)
	return &a
}

func (a projectBelongsToManager) Model(m *models.Project) *projectBelongsToManagerTx {
	return &projectBelongsToManagerTx{a.db.Model(m).Association(a.Name())}
}

type projectBelongsToManagerTx struct{ tx *gorm.Association }

func (a projectBelongsToManagerTx) Find() (result *models.User, err error) {
	return result, a.tx.Find(&result)
}

func (a projectBelongsToManagerTx) Append(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a projectBelongsToManagerTx) Replace(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a projectBelongsToManagerTx) Delete(values ...*models.User) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a projectBelongsToManagerTx) Clear() error {
	return a.tx.Clear()
}

func (a projectBelongsToManagerTx) Count() int64 {
	return a.tx.Count()
}

type projectDo struct{ gen.DO }

type IProjectDo interface {
	gen.SubQuery
	Debug() IProjectDo
	WithContext(ctx context.Context) IProjectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectDo
	WriteDB() IProjectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectDo
	Not(conds ...gen.Condition) IProjectDo
	Or(conds ...gen.Condition) IProjectDo
	Select(conds ...field.Expr) IProjectDo
	Where(conds ...gen.Condition) IProjectDo
	Order(conds ...field.Expr) IProjectDo
	Distinct(cols ...field.Expr) IProjectDo
	Omit(cols ...field.Expr) IProjectDo
	Join(table schema.Tabler, on ...field.Expr) IProjectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectDo
	Group(cols ...field.Expr) IProjectDo
	Having(conds ...gen.Condition) IProjectDo
	Limit(limit int) IProjectDo
	Offset(offset int) IProjectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectDo
	Unscoped() IProjectDo
	Create(values ...*models.Project) error
	CreateInBatches(values []*models.Project, batchSize int) error
	Save(values ...*models.Project) error
	First() (*models.Project, error)
	Take() (*models.Project, error)
	Last() (*models.Project, error)
	Find() ([]*models.Project, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Project, err error)
	FindInBatches(result *[]*models.Project, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Project) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectDo
	Assign(attrs ...field.AssignExpr) IProjectDo
	Joins(fields ...field.RelationField) IProjectDo
	Preload(fields ...field.RelationField) IProjectDo
	FirstOrInit() (*models.Project, error)
	FirstOrCreate() (*models.Project, error)
	FindByPage(offset int, limit int) (result []*models.Project, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectDo) Debug() IProjectDo {
	return p.withDO(p.DO.Debug())
}

func (p projectDo) WithContext(ctx context.Context) IProjectDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectDo) ReadDB() IProjectDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectDo) WriteDB() IProjectDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectDo) Session(config *gorm.Session) IProjectDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectDo) Clauses(conds ...clause.Expression) IProjectDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectDo) Returning(value interface{}, columns ...string) IProjectDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectDo) Not(conds ...gen.Condition) IProjectDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectDo) Or(conds ...gen.Condition) IProjectDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectDo) Select(conds ...field.Expr) IProjectDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectDo) Where(conds ...gen.Condition) IProjectDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectDo) Order(conds ...field.Expr) IProjectDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectDo) Distinct(cols ...field.Expr) IProjectDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectDo) Omit(cols ...field.Expr) IProjectDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectDo) Join(table schema.Tabler, on ...field.Expr) IProjectDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectDo) Group(cols ...field.Expr) IProjectDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectDo) Having(conds ...gen.Condition) IProjectDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectDo) Limit(limit int) IProjectDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectDo) Offset(offset int) IProjectDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectDo) Unscoped() IProjectDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectDo) Create(values ...*models.Project) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectDo) CreateInBatches(values []*models.Project, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectDo) Save(values ...*models.Project) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectDo) First() (*models.Project, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Project), nil
	}
}

func (p projectDo) Take() (*models.Project, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Project), nil
	}
}

func (p projectDo) Last() (*models.Project, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Project), nil
	}
}

func (p projectDo) Find() ([]*models.Project, error) {
	result, err := p.DO.Find()
	return result.([]*models.Project), err
}

func (p projectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Project, err error) {
	buf := make([]*models.Project, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectDo) FindInBatches(result *[]*models.Project, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectDo) Attrs(attrs ...field.AssignExpr) IProjectDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectDo) Assign(attrs ...field.AssignExpr) IProjectDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectDo) Joins(fields ...field.RelationField) IProjectDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectDo) Preload(fields ...field.RelationField) IProjectDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectDo) FirstOrInit() (*models.Project, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Project), nil
	}
}

func (p projectDo) FirstOrCreate() (*models.Project, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Project), nil
	}
}

func (p projectDo) FindByPage(offset int, limit int) (result []*models.Project, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectDo) Delete(models ...*models.Project) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectDo) withDO(do gen.Dao) *projectDo {
	p.DO = *do.(*gen.DO)
	return p
}
